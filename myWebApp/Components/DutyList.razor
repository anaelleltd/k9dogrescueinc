@using myWebApp.Models
@using myWebApp.Services
@using System.Globalization
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileDutyService DutyService

<div class="card-columns">
@foreach (var duty in DutyService.GetDuties())
{
    <div class="card">
        <div class="card-img" style="background-image: url('@duty.Photo');">
        </div>
        <div class="card-body">
            <small class="text-muted"><button @onclick="(e => SelectDuty(duty.Id))" 
              data-toggle="modal" data-target="#dutyModal" class="btn btn-primary">@duty.Task</button>
            </small>
        </div>
    </div>
    <br/>
    <br/>
}
</div>

@if(selectedDuty != null)
{
  <div class="modal fade" id="dutyModal" tabindex="-1" role="dialog" aria-labelledby="dutyTask" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h3 class="modal-title" id="dutyTask">@selectedDuty.Task</h3>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <div class="card">
            <div class="card-body">
                <p class="card-img" style="background-image: url('@selectedDuty.Image');"></p>
                <p class="card-text"><h4>Date Set:</h4> @DateTime.Parse(selectedDuty.Set)</p>
                <p class="card-text"><h4>Date Due:</h4> @Convert.ToDateTime(selectedDuty.Due)</p>
                <p class="card-text"><h4>Dog name:</h4> @selectedDuty.Dog</p>
                <p class="card-text"><h4>Volunteer in charge:</h4> @selectedDuty.Volunteer</p>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          @if(voteCount == 0)
          {
            <span>Be the first to vote!</span>
          }
          else
          {
            <span>@voteCount @voteLabel</span>
          }
          @for(int i=1; i<6; i++)
          {
            var currentStar = i;
            if(i<=currentRating)
            {
              <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
            }
            else
            {
              <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
            }
          }
        </div>
      </div>
    </div>
  </div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code 
{
    Duty selectedDuty;
    string selectedDutyId;

    void SelectDuty(string dutyId)
    {
      selectedDutyId = dutyId;
      selectedDuty = DutyService.GetDuties().First(x => x.Id == dutyId);
      GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    void GetCurrentRating()
    {
      if(selectedDuty.Ratings == null)
      {
        currentRating = 0;
        voteCount = 0;
      }
      else
      {
        voteCount = selectedDuty.Ratings.Count();
        voteLabel = voteCount > 1 ? "Votes" : "Vote";
        currentRating = selectedDuty.Ratings.Sum() / voteCount;
      }

      System.Console.WriteLine($"Current rating for {selectedDuty.Id}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
      System.Console.WriteLine($"Rating received for {selectedDuty.Id}: {rating}");
      DutyService.AddRating(selectedDutyId, rating);
      SelectDuty(selectedDutyId);
    }
}